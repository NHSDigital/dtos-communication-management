name: communication-management

services:
  notify:
    container_name: notify
    build:
      context: ./src/notify
      dockerfile: Dockerfile
      additional_contexts:
        root_dir: .
    environment:
      - APPLICATION_ID=${APPLICATION_ID}
      - CLIENT_APPLICATION_ID=${CLIENT_APPLICATION_ID}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_SSLMODE=${DATABASE_SSLMODE}
      - DATABASE_USER=${DATABASE_USER}
      - NOTIFY_API_KEY=${NOTIFY_API_KEY}
      - NOTIFY_API_URL=${NOTIFY_API_URL}
      - OAUTH2_API_KEY=${OAUTH2_API_KEY}
      - OAUTH2_API_KID=${OAUTH2_API_KID}
      - OAUTH2_TOKEN_URL=${OAUTH2_TOKEN_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
    ports:
      - 7071:7071
    volumes:
      - ./log/function/notify:/tmp/Functions/Host

  db:
    container_name: db
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USER}
      - SSLMODE=${DATABASE_SSLMODE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    image: postgres
    ports:
      - 5432:5432
    profiles:
      - test-end-to-end
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/pgdata

  nhs-notify-api-stub:
    build:
      context: tests/end_to_end/nhs_notify_api_stub
      additional_contexts:
        root_dir: .
      target: builder
    container_name: nhs-notify-api-stub
    # flask requires SIGINT to stop gracefully
    # (default stop signal from Compose is SIGTERM)
    ports:
      - 8000:8000
    profiles:
      - test-end-to-end
    stop_signal: SIGINT

  end-to-end-tests:
    build:
      context: ./tests/end_to_end/runner/
      additional_contexts:
        root_dir: .
      dockerfile: Dockerfile
    container_name: end-to-end-tests
    depends_on:
      db:
        condition: service_healthy
      nhs-notify-api-stub:
        condition: service_started
      notify:
        condition: service_started
    environment:
      - CLIENT_APPLICATION_ID=${CLIENT_APPLICATION_ID}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_SSLMODE=${DATABASE_SSLMODE}
      - DATABASE_USER=${DATABASE_USER}
    profiles:
      - test-end-to-end
    volumes:
      - ./log/functions/notify:/tests/end_to_end/log/functions/notify
