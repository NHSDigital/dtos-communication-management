name: "Test Stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string

env:
  PYTHON_VERSION: ${{ inputs.python_version }}
  NODEJS_VERSION: ${{ inputs.nodejs_version }}

jobs:
  set-up-dependencies:
    name: "Set Up Dependencies"
    runs-on: ubuntu-latest
    steps:
      - name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Install Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Run Setup Script"
        run: ./test-setup.sh

  test-lint:
    name: "Linting"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Run Linting"
        run: make test-lint

  test-unit:
    name: "Unit Tests"
    needs: set-up-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Run Unit Test Suite"
        run: ./test-unit.sh

  test-pacts:
    name: "Pact Tests"
    needs: set-up-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Run Pact Test Suite"
        run: ./test-pacts.sh

  test-integration:
    name: "Integration Tests"
    needs: set-up-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Run Integration Test Suite"
        run: ./test-integration.sh

  test-end-to-end:
    name: "End-to-End Tests"
    needs: set-up-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Run End-to-End Test Suite"
        run: ./test-end-to-end.sh

  test-coverage:
    name: "Test Coverage"
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Run Test Coverage Check"
        run: ./test-coverage.sh

      - name: "Upload Coverage Reports"
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: ./coverage-reports/

  perform-static-analysis:
    name: "Static Analysis"
    needs: test-unit
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis context

      - name: "Perform Static Analysis"
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: "${{ vars.SONAR_ORGANISATION_KEY }}"
          sonar_project_key: "${{ vars.SONAR_PROJECT_KEY }}"
          sonar_token: "${{ secrets.SONAR_TOKEN }}"

      - name: "Upload Analysis Reports"
        uses: actions/upload-artifact@v3
        with:
          name: static-analysis-reports
          path: ./static-analysis-reports/
