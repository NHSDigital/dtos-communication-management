name: "Test stage"

on:
  workflow_call:
    inputs:
      build_datetime:
        description: "Build datetime, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_timestamp:
        description: "Build timestamp, set by the CI/CD pipeline workflow"
        required: true
        type: string
      build_epoch:
        description: "Build epoch, set by the CI/CD pipeline workflow"
        required: true
        type: string
      nodejs_version:
        description: "Node.js version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      python_version:
        description: "Python version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      terraform_version:
        description: "Terraform version, set by the CI/CD pipeline workflow"
        required: true
        type: string
      version:
        description: "Version of the software, set by the CI/CD pipeline workflow"
        required: true
        type: string

jobs:
  set-up-dependencies:
    name: "Set up dependencies"
    runs-on: ubuntu-latest
    steps:
      - name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

  test-lint:
    name: "Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Run linting"
        run: |
          make test-lint
      - name: "Save the linting result"
        run: |
          echo "Nothing to save"
  test-unit:
    name: "Unit tests"
    needs: set-up-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 5
    services:
      postgres:
        image: postgres:11.6-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_SSLMODE: "disable"
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      CI: true
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 5432
      DATABASE_NAME: communication_management_test
      DATABASE_USER: postgres
      DATABASE_PASSWORD: ""
      DATABASE_SSLMODE: "disable"

    steps:
      - name: "Create test db"
        run: |
          psql -U postgres -h 127.0.0.1 -d postgres -tc "CREATE DATABASE communication_management_test;"

      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Install dependencies"
        run: |
          pip install pipenv
          pipenv install --dev --system

      - name: "Run unit test suite"
        run: |
          ./test-unit.sh

  test-integration:
    name: "Integration tests"
    needs: set-up-dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 5
    services:
      postgres:
        image: postgres:11.6-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_SSLMODE: "disable"
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      CI: true
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: 5432
      DATABASE_NAME: communication_management_test
      DATABASE_USER: postgres
      DATABASE_PASSWORD: ""
      DATABASE_SSLMODE: "disable"

    steps:
      - name: "Create test db"
        run: |
          psql -U postgres -h 127.0.0.1 -d postgres -tc "CREATE DATABASE communication_management_test;"

      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Install dependencies"
        run: |
          pip install pipenv
          pipenv install --dev --system

      - name: "Run integration test suite"
        run: |
          ./test-integration.sh
  test-coverage:
    name: "Test coverage"
    needs: [test-unit]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Run test coverage check"
        run: |
          ./test-coverage.sh
      - name: "Save the coverage check result"
        run: |
          echo "Nothing to save"
  perform-static-analysis:
    name: "Perform static analysis"
    needs: [test-unit]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history is needed to improving relevancy of reporting
      - name: "Perform static analysis"
        uses: ./.github/actions/perform-static-analysis
        with:
          sonar_organisation_key: "${{ vars.SONAR_ORGANISATION_KEY }}"
          sonar_project_key: "${{ vars.SONAR_PROJECT_KEY }}"
          sonar_token: "${{ secrets.SONAR_TOKEN }}"
